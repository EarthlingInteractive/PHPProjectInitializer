#!/usr/bin/env php
<?php

$termColorsEnabled = true;

function sys($cmd) {
	if( is_array($cmd) ) {
		$cmd = implode(' ',array_map('escapeshellarg',$cmd));
	}
	fwrite(STDERR, "$ $cmd\n");
	system($cmd, $status);
	if( $status !== 0 ) {
		throw new Exception("Command exited with status $status: $cmd");
	}
}

function leMake( array $targets, $baseDir='.' ) {
	if( count($targets) == 0 ) return;
	$cmd = "make -C ".escapeshellarg($baseDir)." ".implode(" ",array_map('escapeshellarg',$targets));
	$status = null;
	system($cmd, $status);
	if( $status != 0 ) {
		fwrite( STDERR, "Error: Failed to build stuff; make failed:\n  $cmd\n" );
		exit(1);
	}
}

function _defalt( array &$a, $k, $defaultValue ) {
	if( !isset($a[$k]) ) $a[$k] = $defaultValue;
}

function defaultSettings( array $settings ) {
	if( !isset($settings['projectName']) ) {
		throw new Exception("Can't generate default project settings without projectName");
	}
	$littleProjectName = preg_replace('/[^a-z0-9]/','',strtolower($settings['projectName']));
	
	if( !isset($settings['phpNamespace']) ) {
		$fixName = strtr( $settings['projectName'], array('-'=>' ','/'=>'_','\\'=>'_') );
		$fixName = preg_replace('/[^a-z0-9 _]/i','',$fixName);
		$ucName = ucwords($fixName);
		
		$settings['phpNamespace'] = str_replace(' ','',$ucName);
	}
	
	_defalt($settings, 'nodePackageNamePrefix', preg_replace('/[^a-z0-9-]/','',str_replace(' ','-',strtolower($settings['projectName']))));
	_defalt($settings, 'deploymentHostname', preg_replace('/[^a-z0-9]/','',strtolower($settings['projectName'])).'.localhost');
	_defalt($settings, 'deploymentUrlPrefix', 'http://'.$settings['deploymentHostname'].'/');
	_defalt($settings, 'databaseName', $littleProjectName);
	_defalt($settings, 'databaseHost', 'localhost');
	_defalt($settings, 'databaseUser', $settings['databaseName']);
	_defalt($settings, 'databasePassword', $settings['databaseName']);
	_defalt($settings, 'databaseNamespace', $settings['databaseName']);
	return $settings;
}

function defaultSettingsMetadata() {
	$titles = array(
		'project name',
		'PHP namespace',
		'database name',
		'database host',
		'database user',
		'database password',
		'deployment URL prefix',
		'database object prefix',
		'database namespace'
	);
	$md = array();
	foreach( $titles as $t ) {
		$cc = EarthIT_Schema_WordUtil::toCamelCase($t);
		if( !isset($md[$cc]) ) $md[$cc] = array();
		$md[$cc] += array('title'=>$t);
	}
	return $md;
}

function generateSettingsMetadata(array $settings, array $dmd=null) {
	if( $dmd === null ) $dmd = defaultSettingsMetadata();
	$md = array();
	foreach( $settings as $k=>$v ) {
		if( is_array($v) ) continue;
		$md[$k] = isset($dmd[$k]) ? $dmd[$k] : array('title'=>$k);
	}
	return $md;
}

function dieForUsageError( $message ) {
	global $argv;
	fwrite( STDERR, "Error: $message\n" );
	fwrite( STDERR, "Run '{$argv[0]} -?' for usage information\n" );
	exit(1);
}

function prompt( array $fieldInfo, $defaultValue='' ) {
	global $termColorsEnabled;
	if( !empty($fieldInfo['notes']) ) {
		echo "\n";
		$notes = is_array($fieldInfo['notes']) ? $fieldInfo['notes'] : array($fieldInfo['notes']);
		foreach( $notes as $note ) {
			echo $note, "\n";
		}
	}
	if( $termColorsEnabled ) echo "\e[96m";
	echo $fieldInfo['title'];
	if( $termColorsEnabled ) echo "\e[0m";
	if( $defaultValue ) echo " [$defaultValue]";
	echo "> ";
	$line = fgets( STDIN );
	$input = trim($line);
	if( $input == '\\' ) return '';
	if( $input == '' ) return $defaultValue;
	return $input;
}

function dumpProjectSettingsKeys( $stream ) {
	foreach( get_class_vars('EarthIT_PHP_ProjectSetupper_ProjectSettings') as $k=>$v ) {
		fwrite( $stream, "  $k\n" );
	}
}




//// Parse command-line arguments ////

$baseDir = __DIR__.'/..';
echo "Base directory: $baseDir\n";

// TODO: Refactor ProjectSetupper constructor to take a ProjectSettings
// and allow settings to be given on the command-line

$gitUserName = null;
$gitUserEmail = null;
$templateProjectDir = null;
$outputProjectDir = null;
$phpNamespace = null;
$interactive = false;
$makeCommits = true;
$showHelp = false;
$overwrite = false;
$makeTargetsToBuild = array();
$outputProjectSettings = array(
	'projectName' => null
);
for( $i=1; $i<$argc; ++$i ) {
	$arg = $argv[$i];
	switch( $arg ) {
	case '-?': case '-h': case '-help': case '--help':
		$showHelp = true;
		break;
	case '-o':
		$outputProjectDir = $argv[++$i];
		break;
	case '-t':
		$templateProjectDir = $argv[++$i];
		break;
	case '-i':
		$interactive = true;
		break;
	case '-a':
		if( preg_match( '/^([^<]+)<([^>]+)>$/', $argv[++$i], $bif ) ) {
			$gitUserName = trim($bif[1]);
			$gitUserEmail = trim($bif[2]);
		} else {
			fwrite(STDERR, "Error: Syntax for -a option must be 'username <e-mail address>'\n");
			exit(1);
		}
		break;
	case '--color':
		$termColorsEnabled = true;
		break;
	case '--no-commit':
		$makeCommits = false;
		break;
	case '--drop-database':
		$makeTargetsToBuild[] = 'drop-database';
		break;
	case '--create-database':
		$makeTargetsToBuild[] = 'create-database';
		break;
	case '--run-tests':
		$makeTargetsToBuild[] = 'run-tests';
		break;
	case '--make':
		$makeTargetsToBuild[] = $argv[++$i];
		break;
	case '--overwrite':
		$overwrite = true;
		break;
	default:
		if( preg_match('/^--color=(on|off|always|never)$/',$arg,$bif) ) {
			switch( $bif[1] ) {
			case 'on': case 'always':
				$termColorsEnabled = true;
				break;
			case 'off': case 'never':
				$termColorsEnabled = false;
				break;
			}
			break;
		} else if( $arg[0] != '-' ) {
			if( preg_match('/^(.+?)=(.*)$/',$arg,$bif) ) {
				$outputProjectSettings[$bif[1]] = $bif[2];
				break;
			} else if( $outputProjectSettings['projectName'] === null ) {
				$outputProjectSettings['projectName'] = $arg;
				break;
			} else if( $phpNamespace === null ) {
				$phpNamespace = $arg;
				break;
			}
		}
		dieForUsageError("Unrecognized argument: '$arg'");
	}
}




//// Check arguments ////

$usageText = 
	"Usage: {$argv[0]} [<project name>] [<namespace>] [-i] [-?]\n".
	"General options:\n".
	"  -i       ; interactive\n".
	"  -a 'name <e-mail>' ; indicate git user info for initial commit\n".
	"  -t <dir> ; specify template directory\n".
	"  -o <dir> ; specify output directory (defaults to '.')\n".
	"  -?       ; show help\n".
	"  --color={on|off|always|never} ; enable/disable colorful prompts\n".
	"Build options:\n".
	"  --make <target>   ; build a Make target on the new project\n".
	"  --drop-database   ; Short for --make drop-database\n".
	"  --create-database ; Short for --make create-database\n".
	"  --run-tests       ; Short for --make run-tests\n";

if( $showHelp ) {
	fwrite( STDOUT, $usageText );
	exit(0);
}

if( $templateProjectDir === null ) {
	$templateProjectDir = $baseDir.'/templates/PHPTemplateProject';
}
if( $outputProjectDir === null and !$interactive ) {
	dieForUsageError("Project directory must be specified unless in interactive mode");
}




//// Build PHPProjectInitializer if needed ////

$prereqs = array('vendor');
if( strpos($templateProjectDir,$baseDir) === 0 and !file_exists($templateProjectDir) ) {
	$prereqs[] = substr($templateProjectDir,strlen($baseDir)+1);
}

leMake($prereqs, $baseDir);




//// Do the work ////

require_once $baseDir.'/vendor/autoload.php';

$templateProject = new EarthIT_PHPProjectRewriter_Project($templateProjectDir);
$templateProjectSettings = $templateProject->getConfig();

$templateSettingsMetadataFile = "{$templateProjectDir}/.ppi-settings-metadata.json";
if( file_exists($templateSettingsMetadataFile) ) {
	$settingsMetadata = json_decode(file_get_contents($templateSettingsMetadataFile),true);
} else {
	$settingsMetadata = null;
}
$settingsMetadata = generateSettingsMetadata($templateProjectSettings, $settingsMetadata);

if( $interactive ) {
	$welcomePre = $termColorsEnabled ? "\e[1m\e[32m" : '';
	$welcomePost = $termColorsEnabled ? "\e[0m" : '';
	echo
		"\n",
		" ~ ~ {$welcomePre}Welcome to PHPProjectInitializer!{$welcomePost} ~ ~ \n",
		"\n",
		"I'm going to ask you a bunch of questions.\n",
		"Hit enter to accept [default values].\n",
		"Enter a single backslash to indicate 'empty string'\n";
	$outputProjectDir = prompt( array(
		'title' => "Project directory",
		'notes' => array(
			"Enter the name of the directory in which you want to create the project.",
			"I usually use some UpperCamelCase thing like 'SomethingSomethingWebServices'.",
			"This is where I'll write the new project to but otherwise it isn't recorded",
			"anywhere, so don't spend too much time thinking about it.",
			"Enter '.' for the current directory."
		),
	), $outputProjectDir );
}

$outputSettingsFile = "{$outputProjectDir}/.ppi-settings.json";
if( file_exists($outputSettingsFile) ) {
	$outputProjectSettings = array_merge(
		$outputProjectSettings,
		json_decode(file_get_contents($outputSettingsFile),true)
	);
}

if( !isset($outputProjectSettings['projectName']) and !$interactive ) {
	dieForUsageError("Project name must be specified unless in interactive mode");
}

if( $interactive ) {
	$outputProjectSettings['projectName'] = prompt( array('title'=>"Project name"), $outputProjectSettings['projectName'] );
	$outputProjectSettings = defaultSettings($outputProjectSettings);
	foreach( $settingsMetadata as $k=>$info ) {
		if( $k == 'projectName' ) continue; // Already asked!
		if( isset($outputProjectSettings[$k]) ) {
			$v = $outputProjectSettings[$k];
		} else if( isset($info['defaultValue']) ) {
			$v = $info['defaultValue'];
		} else {
			$v = '';
		}
		$outputProjectSettings[$k] = prompt( $info, $v );
	}
} else {
	$outputProjectSettings = defaultSettings($outputProjectSettings);
}

foreach( $templateProjectSettings as $k=>$v ) {
	// Anything setting not explicitly defined should default to the
	// template project's value.
	_defalt($outputProjectSettings, $k, $v);
}

$makeCommits = $makeCommits && is_dir("$templateProjectDir/.git");
if( $makeCommits ) {
	// Make sure we have a name and e-mail so we can do as such
	$gitGlobalUserName  = `git config --global --get user.name`;
	$gitGlobalUserEmail = `git config --global --get user.email`;
	if( !$gitUserName and !$gitGlobalUserName ) {
		if( $interactive ) {
			$gitUserName = prompt(array(
				'title' => "Git user name",
				'notes' => array(
					"After rewriting, I'm going to create an initial commit for you.",
					"Since you don't have a Git username configured globally, I will set it on",
					"the newly created project to whatever you tell me here.",
				)
			));
		} else {
			fwrite(STDERR, "Can't make commit because no git user.name specified or configured globally.\n");
			exit(1);
		}
	}
	if( !$gitUserEmail and !$gitGlobalUserEmail ) {
		if( $interactive ) {
			$gitUserEmail = prompt(array('title'=>"Git user e-mail address"));
		} else {
			fwrite(STDERR, "Can't make commit because no git user.email specified or configured globally.\n");
			exit(1);
		}
	}
	
	if( empty($gitUserName) ) {
		$gitUserName = "PHPProjectInitializer";
		if( $interactive ) echo "Defaulting Git username to $gitUserName\n";
	}
	if( empty($gitUserEmail) ) {
		$gitUserEmail = "PHPProjectInitializer@earthit.com";
		if( $interactive ) echo "Defaulting Git user e-mail address to $gitUserEmail\n";
	}
}

//// Actually do the rewrite

if( !is_dir($outputProjectDir) ) mkdir($outputProjectDir, 0755, true);

file_put_contents($outputSettingsFile, EarthIT_JSON::prettyEncode($outputProjectSettings)."\n");

$outputProject = new EarthIT_PHPProjectRewriter_Project($outputProjectDir, $outputProjectSettings);

$rewriter = new EarthIT_PHPProjectRewriter();
$rewriter->rewrite( $templateProject, $outputProject );

// Make default config files
if( is_dir($outputProjectConfigDir = "{$outputProjectDir}/config") ) {
	$dh = opendir($outputProjectConfigDir);
	while( ($fn = readdir($dh)) !== false ) {
		if( preg_match('/^(.*?)\.example$/',$fn,$bif) and !file_exists("{$outputProjectConfigDir}/{$bif[1]}") ) {
			copy("{$outputProjectConfigDir}/{$fn}", "{$outputProjectConfigDir}/{$bif[1]}");
		}
	}
	closedir($dh);
}

if( $makeCommits ) {
	$dir = getcwd();
	chdir($outputProjectDir);
	try {
		sys("git add -A");
		sys("git checkout -b rewritten-template-project");
		if( !$gitGlobalUserName  ) sys("git config user.name ".escapeshellarg($gitUserName));
		if( !$gitGlobalUserEmail ) sys("git config user.email ".escapeshellarg($gitUserEmail));
		sys("git commit -m 'Generate from template project'");
		sys("git checkout master");
		sys("git merge rewritten-template-project");
		sys("git tag | xargs -n 1 git tag -d");
		sys("git remote | xargs -n 1 git remote rm"); // Don't want people accidentally pushing to the template's remotes!
	} finally {
		chdir($dir);
	}
} else {
	fwrite(STDERR, "\$makeCommits is false\n");
}

if( $makeTargetsToBuild ) {
	leMake($makeTargetsToBuild, $outputProjectDir);
}
